-- MySQL Script generated by MySQL Workbench
-- Wed Nov  6 16:52:15 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema codeVenture
-- -----------------------------------------------------
-- DROP SCHEMA IF EXISTS `codeVenture` ;

-- -----------------------------------------------------
-- Schema codeVenture
-- -----------------------------------------------------
-- CREATE SCHEMA IF NOT EXISTS `codeVenture` DEFAULT CHARACTER SET utf8 ;
-- USE `codeVenture` ;

-- -----------------------------------------------------
-- Table `users`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `users` ;

CREATE TABLE IF NOT EXISTS `users` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `email` VARCHAR(45) NULL,
  `password` VARCHAR(255) NULL,
  `created_at` DATETIME NOT NULL DEFAULT NOW(),
  `updated_at` DATETIME NOT NULL DEFAULT NOW(),
  PRIMARY KEY (`id`))
ENGINE = InnoDB;

--
-- Dumping data for table `users`
--

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
INSERT INTO `users` VALUES (1,'developer.access@email.com','$2a$10$HZp1TugssOp2hTrCdiC.6.SshhsK4Uz8u8nE/XHG9D0MAN/FP0YLe','2024-10-19 04:38:45','2024-10-19 04:38:45'),(2,'jograt@email.com','$2a$10$i3eRGt.GNBdH8IKcnNpnROwldSZ4sJCixeMYHXToPMcVUJxC1f86G','2024-10-30 20:12:08','2024-10-30 20:12:08');
/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;

-- -----------------------------------------------------
-- Table `credentials`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `credentials` ;

CREATE TABLE IF NOT EXISTS `credentials` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `user_id` INT NOT NULL,
  `first_name` VARCHAR(45) NULL,
  `last_name` VARCHAR(45) NULL,
  `created_at` DATETIME NULL DEFAULT NOW(),
  `updated_at` DATETIME NULL DEFAULT NOW(),
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_credentials_users`
    FOREIGN KEY (`user_id`)
    REFERENCES `users` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_credentials_users_idx` ON `credentials` (`user_id` ASC) ;

--
-- Dumping data for table `credentials`
--

LOCK TABLES `credentials` WRITE;
/*!40000 ALTER TABLE `credentials` DISABLE KEYS */;
INSERT INTO `credentials` VALUES (1,1,'developer','access','2024-10-19 04:38:46','2024-10-19 04:38:46'),(2,2,'Jograt','Rapone','2024-10-30 20:12:08','2024-10-30 20:12:08');
/*!40000 ALTER TABLE `credentials` ENABLE KEYS */;
UNLOCK TABLES;
-- -----------------------------------------------------
-- Table `roles`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `roles` ;

CREATE TABLE IF NOT EXISTS `roles` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `user_id` INT NOT NULL,
  `roles` VARCHAR(255) NULL,
  `created_at` DATETIME NULL DEFAULT NOW(),
  `updated_at` DATETIME NULL DEFAULT NOW(),
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_roles_users1`
    FOREIGN KEY (`user_id`)
    REFERENCES `users` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_roles_users1_idx` ON `roles` (`user_id` ASC) ;
--
-- Dumping data for table `roles`
--

LOCK TABLES `roles` WRITE;
/*!40000 ALTER TABLE `roles` DISABLE KEYS */;
INSERT INTO `roles` VALUES (1,1,'admin','2024-10-19 04:38:46','2024-10-19 04:38:46');
/*!40000 ALTER TABLE `roles` ENABLE KEYS */;
UNLOCK TABLES;

-- -----------------------------------------------------
-- Table `lessons`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `lessons` ;

CREATE TABLE IF NOT EXISTS `lessons` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `role_id` INT NOT NULL,
  `title` VARCHAR(45) NULL,
  `description` VARCHAR(255) NULL,
  `created_at` DATETIME NULL DEFAULT NOW(),
  `updated_at` DATETIME NULL DEFAULT NOW(),
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_groups_teachers1`
    FOREIGN KEY (`role_id`)
    REFERENCES `roles` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_groups_teachers1_idx` ON `lessons` (`role_id` ASC) ;
--
-- Dumping data for table `lessons`
--

LOCK TABLES `lessons` WRITE;
/*!40000 ALTER TABLE `lessons` DISABLE KEYS */;
INSERT INTO `lessons` VALUES (1,1,'New Lesson ','test','2024-10-19 04:39:18','2024-10-19 04:39:18');
/*!40000 ALTER TABLE `lessons` ENABLE KEYS */;
UNLOCK TABLES;

-- -----------------------------------------------------
-- Table `levels`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `levels` ;

CREATE TABLE IF NOT EXISTS `levels` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `lesson_id` INT NOT NULL,
  `level_name` VARCHAR(45) NULL,
  `content` BLOB NULL,
  `isTask` TINYINT NULL,
  `order_number` INT DEFAULT NULL
  `created_at` DATETIME NULL DEFAULT NOW(),
  `updated_at` DATETIME NULL DEFAULT NOW(),
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_challenges_groups1`
    FOREIGN KEY (`lesson_id`)
    REFERENCES `lessons` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_challenges_groups1_idx` ON `levels` (`lesson_id` ASC) ;

--
-- Dumping data for table `levels`
--

LOCK TABLES `levels` WRITE;
/*!40000 ALTER TABLE `levels` DISABLE KEYS */;
INSERT INTO `levels` VALUES (1,1,'PHP Syntax','A PHP script is executed on the server, and the plain HTML result is sent back to the browser.\r\n\r\n## Basic PHP Syntax\r\nA PHP script can be placed anywhere in the document.\r\n\r\nA PHP script starts with `<?php` and ends with `?>`:\r\n\r\n```\r\n<?php\r\n// PHP code goes here\r\n?>\r\n```\r\n\r\nThe default file extension for PHP files is \"`.php`\".\r\n\r\nA PHP file normally contains HTML tags, and some PHP scripting code.\r\n\r\nBelow, we have an example of a simple PHP file, with a PHP script that uses a built-in PHP function \"`echo`\" to output the text \"Hello World!\" on a web page\r\n\r\n## Example\r\nA simple `.php` file with both HTML code and PHP code:\r\n```\r\n<!DOCTYPE html>\r\n<html>\r\n<body>\r\n\r\n<h1>My first PHP page</h1>\r\n\r\n<?php\r\necho \"Hello World!\";\r\n?>\r\n\r\n</body>\r\n</html>\r\n```\r\n\r\n**Note**: PHP statements end with a semicolon (`;`).\r\n\r\n# PHP Case Sensitivity\r\nIn PHP, keywords (e.g. `if`, `else`, `while`, `echo`, etc.), classes, functions, and user-defined functions are not case-sensitive.\r\n\r\nIn the example below, all three echo statements below are equal and legal:\r\n\r\n## Example\r\n`ECHO` is the same as `echo`:\r\n```\r\n<!DOCTYPE html>\r\n<html>\r\n<body>\r\n\r\n<?php\r\nECHO \"Hello World!<br>\";\r\necho \"Hello World!<br>\";\r\nEcHo \"Hello World!<br>\";\r\n?>\r\n\r\n</body>\r\n</html>\r\n```\r\n',0,'2024-10-19 05:04:49','2024-10-19 05:04:49'),(2,1,'PHP Comments','# PHP Comments\r\n## Comments in PHP\r\nA comment in PHP code is a line that is not executed as a part of the program. Its only purpose is to be read by someone who is looking at the code.\r\n\r\nComments can be used to:\r\n\r\n* Let others understand your code\r\n* Remind yourself of what you did - Most programmers have experienced coming back to their own work a year or two later and having to re-figure out what they did. Comments can remind you of what you were thinking when you wrote the code\r\n* Leave out some parts of your code\r\n\r\nPHP supports several ways of commenting:\r\n\r\n## Example\r\nSyntax for comments in PHP code:\r\n```\r\n// This is a single-line comment\r\n\r\n# This is also a single-line comment\r\n\r\n/* This is a\r\nmulti-line comment */\r\n```\r\n\r\n## Single Line Comments\r\nSingle line comments start with `//`.\r\n\r\nAny text between `//` and the end of the line will be ignored (will not be executed).\r\n\r\nYou can also use `#` for single line comments, but in this tutorial we will use `//`.\r\n\r\nThe following examples uses a single-line comment as an explanation:\r\n\r\n## Example\r\nA comment before the code:\r\n```\r\n// Outputs a welcome message:\r\necho \"Welcome Home!\";\r\n```\r\n\r\n## Example\r\nA comment at the end of a line:\r\n```\r\necho \"Welcome Home!\"; // Outputs a welcome message\r\n```\r\n## Comments to Ignore Code\r\nWe can use comments to prevent code lines from being executed:\r\n\r\nExample\r\nDo not display a welcome message:\r\n```\r\n// echo \"Welcome Home!\";\r\n```',0,'2024-10-19 05:30:38','2024-10-19 05:30:38'),(3,1,'PHP Strings','# PHP Strings\r\nA string is a sequence of characters, like \"Hello world!\".\r\n\r\n## Strings\r\nStrings in PHP are surrounded by either double quotation marks, or single quotation marks.\r\n\r\n### Example\r\n```\r\necho \"Hello\";\r\necho \'Hello\';\r\n```\r\n\r\n**Note** There is a big difference between double quotes and single quotes in PHP.\r\n\r\nDouble quotes process special characters, single quotes does not.\r\n\r\n## Double or Single Quotes?\r\nYou can use double or single quotes, but you should be aware of the differences between the two.\r\n\r\nDouble quoted strings perform action on special characters.\r\n\r\nE.g. when there is a variable in the string, it returns the value of the variable:\r\n## Example\r\nDouble quoted string literals perform operations for special characters:\r\n```\r\n$x = \"John\";\r\necho \"Hello $x\";\r\n```\r\nSingle quoted strings does not perform such actions, it returns the string like it was written, with the variable name:\r\n\r\n### Example\r\nSingle quoted string literals returns the string as it is:\r\n```\r\n$x = \"John\";\r\necho \'Hello $x\';\r\n```\r\n## String Length\r\nThe PHP `strlen()` function returns the length of a string.\r\n### Example\r\nReturn the length of the string \"Hello world!\":\r\n```\r\necho strlen(\"Hello world!\");\r\n```\r\n## Word Count\r\nThe PHP `str_word_count()` function counts the number of words in a string.\r\n\r\n### Example\r\nCount the number of word in the string \"Hello world!\":\r\n```\r\necho str_word_count(\"Hello world!\");\r\n```\r\n## Search For Text Within a String\r\nThe PHP `strpos()` function searches for a specific text within a string.\r\n\r\nIf a match is found, the function returns the character position of the first match. If no match is found, it will return FALSE.\r\n\r\n### Example\r\nSearch for the text \"world\" in the string \"Hello world!\":\r\n```\r\necho strpos(\"Hello world!\", \"world\");\r\n```\r\n\r\n**Tip**: The first character position in a string is 0 (not 1).\r\n\r\n## Complete PHP String Reference\r\n\r\nThe PHP string reference contains description and example of use, for each function!\r\n\r\n',0,'2024-10-19 05:43:08','2024-10-19 05:43:08'),(4,1,'PHP Numbers','In this chapter we will look in depth into Integers, Floats, and Number Strings.\r\n\r\n# PHP Numbers\r\n\r\nThere are three main numeric types in PHP:\r\n\r\n*`Integer`\r\n*`Float`\r\n*`Number Strings`\r\n\r\nIn addition, PHP has two more data types used for numbers:\r\n\r\n*`Infinity`\r\n*`NaN`\r\n\r\nVariables of numeric types are created when you assign a value to them:\r\n\r\n### Example\r\n```\r\n$a = 5;\r\n$b = 5.34;\r\n$c = \"25\";\r\n```\r\n\r\nTo verify the type of any object in PHP, use the `var_dump()` function:\r\n\r\n### Example\r\n```\r\nvar_dump($a);\r\nvar_dump($b);\r\nvar_dump($c);\r\n```\r\n\r\nPHP Integers\r\n2, 256, -256, 10358, -179567 are all integers.\r\n\r\nAn integer is a number without any decimal part.\r\n\r\nAn integer data type is a non-decimal number between -2147483648 and 2147483647 in 32 bit systems, and between -9223372036854775808 and 9223372036854775807 in 64 bit systems. A value greater (or lower) than this, will be stored as float, because it exceeds the limit of an integer.\r\n\r\n**Note**: Another important thing to know is that even if 4 * 2.5 is 10, the result is stored as float, because one of the operands is a float (2.5).\r\n\r\nHere are some rules for integers:\r\n\r\n*An integer must have at least one digit\r\n*An integer must NOT have a decimal point\r\n*An integer can be either positive or negative\r\n*Integers can be specified in three formats: decimal (base 10), hexadecimal (base 16 - prefixed with 0x), octal (base 8 - prefixed with 0) or binary (base 2 - prefixed with 0b)\r\n\r\nPHP has the following predefined constants for integers:\r\n\r\n*`PHP_INT_MAX` - The largest integer supported\r\n*`PHP_INT_MIN` - The smallest integer supported\r\n*`PHP_INT_SIZE` -  The size of an integer in bytes\r\n\r\nPHP has the following functions to check if the type of a variable is integer:\r\n\r\n*`is_int()`\r\n*`is_integer()` - alias of `is_int()`\r\n*`is_long()` - alias of `is_int()\r\n\r\n### Example\r\nCheck if the type of a variable is integer:\r\n```\r\n$x = 5985;\r\nvar_dump(is_int($x));\r\n\r\n$x = 59.85;\r\nvar_dump(is_int($x));\r\n```\r\n\r\nPHP Floats\r\nA float is a number with a decimal point or a number in exponential form.\r\n\r\n2.0, 256.4, 10.358, 7.64E+5, 5.56E-5 are all floats.\r\n\r\nThe float data type can commonly store a value up to 1.7976931348623E+308 (platform dependent), and have a maximum precision of 14 digits.\r\n\r\nPHP has the following predefined constants for floats (from PHP 7.2):\r\n\r\n*`PHP_FLOAT_MAX` - The largest representable floating point number\r\n*`PHP_FLOAT_MIN` - The smallest representable positive floating point number\r\n*`PHP_FLOAT_DIG` - The number of decimal digits that can be rounded into a float and back without precision loss\r\n*`PHP_FLOAT_EPSILON` - The smallest representable positive number x, so that x + 1.0 != 1.0\r\n\r\nPHP has the following functions to check if the type of a variable is float:\r\n\r\n*`is_float()`\r\n*`is_double()` - alias of `is_float()`\r\n\r\n### Example\r\nCheck if the type of a variable is float:\r\n```\r\n$x = 10.365;\r\nvar_dump(is_float($x));\r\n```\r\n# PHP Infinity\r\nA numeric value that is larger than `PHP_FLOAT_MAX` is considered infinite.\r\n\r\nPHP has the following functions to check if a numeric value is finite or infinite:\r\n\r\n*is_finite()\r\n*is_infinite()\r\n\r\nHowever, the `PHP var_dump()` function returns the data type and value:\r\n\r\nExample\r\nCheck if a numeric value is finite or infinite:\r\n```\r\n$x = 1.9e411;\r\nvar_dump($x);\r\n```\r\n\r\n## PHP NaN\r\n`NaN` stands for Not a Number.\r\n\r\n`NaN` is used for impossible mathematical operations.\r\n\r\nPHP has the following functions to check if a value is not a number:\r\n\r\n*`is_nan()`\r\n\r\nHowever, the PHP `var_dump()` function returns the data type and value:\r\n\r\nExample\r\nInvalid calculation will return a `NaN` value:\r\n```\r\n$x = acos(8);\r\nvar_dump($x);\r\n```\r\n\r\n## PHP Numerical Strings\r\nThe PHP `is_numeric()` function can be used to find whether a variable is numeric. The function returns true if the variable is a number or a numeric string, false otherwise.\r\n\r\nExample\r\nCheck if the variable is numeric:\r\n```\r\n$x = 5985;\r\nvar_dump(is_numeric($x));\r\n\r\n$x = \"5985\";\r\nvar_dump(is_numeric($x));\r\n$x = \"59.85\" + 100;\r\nvar_dump(is_numeric($x));\r\n\r\n$x = \"Hello\";\r\nvar_dump(is_numeric($x));\r\n```\r\n\r\n**Note**: From PHP 7.0: The `is_numeric()` function will return FALSE for numeric strings in hexadecimal form (e.g. 0xf4c3b00c), as they are no longer considered as numeric strings.\r\n\r\n## PHP Casting Strings and Floats to Integers\r\nSometimes you need to cast a numerical value into another data type.\r\n\r\nThe `(int)`, `(integer)`, and `intval()` functions are often used to convert a value to an integer.\r\n\r\n### Example\r\nCast float and string to integer:\r\n```\r\n// Cast float to int\r\n$x = 23465.768;\r\n$int_cast = (int)$x;\r\necho $int_cast;\r\n\r\necho \"<br>\";\r\n\r\n// Cast string to int\r\n$x = \"23465.768\";\r\n$int_cast = (int)$x;\r\necho $int_cast;\r\n```',0,'2024-10-19 06:04:24','2024-10-19 06:04:24'),(5,1,'PHP Math','# PHP MATH\r\nPHP has a set of math functions that allows you to perform mathematical tasks on numbers.\r\n\r\n## PHP pi() Function\r\nThe `pi()` function returns the value of PI:\r\n\r\nExample\r\n```\r\necho(pi());\r\n```\r\n\r\n## PHP min() and max() Functions\r\nThe `min()` and `max()` functions can be used to find the lowest or highest value in a list of arguments:\r\n\r\nExample\r\n```\r\necho(min(0, 150, 30, 20, -8, -200));\r\necho(max(0, 150, 30, 20, -8, -200));\r\n```\r\n\r\n## PHP abs() Function\r\nThe `abs()` function returns the absolute (positive) value of a number:\r\n\r\nExample\r\n```\r\necho(abs(-6.7));\r\n```\r\n\r\n## PHP sqrt() Function\r\nThe `sqrt()` function returns the square root of a number:\r\n\r\nExample\r\n```\r\necho(sqrt(64));\r\n```\r\n\r\n## PHP round() Function\r\nThe `round()` function rounds a floating-point number to its nearest integer:\r\n\r\nExample\r\n```\r\necho(round(0.60));\r\necho(round(0.49));\r\n```\r\n\r\n## Random Numbers\r\nThe `rand()` function generates a random number:\r\n\r\nExample\r\n```\r\necho(rand());\r\n```\r\n\r\nTo get more control over the random number, you can add the optional min and max parameters to specify the lowest integer and the highest integer to be returned.\r\n\r\nFor example, if you want a random integer between 10 and 100 (inclusive), use `rand(10, 100)`:\r\n\r\nExample\r\n```\r\necho(rand(10, 100));\r\n```\r\n\r\n',0,'2024-10-19 06:12:07','2024-10-19 06:12:07'),(6,1,'INTRODUCTION TO PHP','# PHP Tutorial\r\n### Learn PHP\r\nPHP is a server scripting language, and a powerful tool for making dynamic and interactive Web pages.\r\n\r\nPHP is a widely-used, free, and efficient alternative to competitors such as Microsoft\'s ASP.\r\n\r\n### Example\r\n```\r\n<!DOCTYPE html>\r\n<html>\r\n<body>\r\n \r\n<?php\r\necho \"My first PHP script!\";\r\n?>\r\n\r\n</body>\r\n</html>\r\n```\r\n\r\n\r\n',0,'2024-11-05 16:36:56','2024-11-05 16:36:56'),(7,1,'INSTALL PHP','# PHP Installation\r\n#### What Do I Need?\r\nTo start using PHP, you can:\r\n\r\n* Find a web host with PHP and MySQL support\r\n* Install a web server on your own PC, and then install PHP and MySQL\r\n\r\n## Use a Web Host With PHP Support\r\nIf your server has activated support for PHP you do not need to do anything.\r\n\r\nJust create some `.php` files, place them in your web directory, and the server will automatically parse them for you.\r\n\r\nYou do not need to compile anything or install any extra tools.\r\n\r\nBecause PHP is free, most web hosts offer PHP support.\r\n\r\n## Set Up PHP on Your Own PC\r\nHowever, if your server does not support PHP, you must:\r\n\r\n* install a web server\r\n* install PHP\r\n* install a database, such as MySQL\r\n\r\nThe official PHP website (PHP.net) has installation instructions for PHP: http://php.net/manual/en/install.php\r\n\r\n\r\n',0,'2024-11-05 16:44:07','2024-11-05 16:44:07'),(8,1,'PHP Variables','# PHP Variables\r\nVariables are \"containers\" for storing information.\r\n\r\n# Creating (Declaring) PHP Variables\r\n\r\nIn PHP, a variable starts with the `$` sign, followed by the name of the variable:\r\n\r\n## Example\r\n```\r\n$x = 5;\r\n$y = \"John\";\r\n```\r\n\r\nIn the example above, the variable $x will hold the value 5, and the variable $y will hold the value \"John\".\r\n\r\n**Note:** When you assign a text value to a variable, put quotes around the value.\r\n\r\n**Note:** Unlike other programming languages, PHP has no command for declaring a variable. It is created the moment you first assign a value to it.\r\n\r\n\r\n***Think of variables as containers for storing data.***\r\n\r\n# PHP Variables\r\nA variable can have a short name (like `$x` and `$y`) or a more descriptive name (`$age`, `$carname`, `$total_volume`).\r\n\r\nRules for PHP variables:\r\n\r\n* A variable starts with the $ sign, followed by the name of the variable\r\n* A variable name must start with a letter or the underscore character\r\n* A variable name cannot start with a number\r\n* A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ )\r\n* Variable names are case-sensitive ($age and $AGE are two different variables)\r\n\r\n***Remember that PHP variable names are case-sensitive!***\r\n\r\n## Output Variables\r\nThe PHP `echo` statement is often used to output data to the screen.\r\n\r\nThe following example will show how to output text and a variable:\r\n## Example\r\n```\r\n$txt = \"W3Schools.com\";\r\necho \"I love $txt!\";\r\n```\r\n\r\nThe following example will produce the same output as the example above:\r\n\r\n## Example\r\n```\r\n$txt = \"W3Schools.com\";\r\necho \"I love \" . $txt . \"!\";\r\n```\r\n\r\nThe following example will output the sum of two variables:\r\n\r\n## Example\r\n```\r\n$x = 5;\r\n$y = 4;\r\necho $x + $y;\r\n```\r\n\r\n# PHP is a Loosely Typed Language\r\nIn the example above, notice that we did not have to tell PHP which data type the variable is.\r\n\r\nPHP automatically associates a data type to the variable, depending on its value. Since the data types are not set in a strict sense, you can do things like adding a string to an integer without causing an error.\r\n\r\nIn PHP 7, type declarations were added. This gives an option to specify the data type expected when declaring a function, and by enabling the strict requirement, it will throw a \"Fatal Error\" on a type mismatch.\r\n\r\nYou will learn more about `strict` and `non-strict` requirements, and data type declarations in the PHP Functions chapter.\r\n\r\n## Variable Types\r\nPHP has no command for declaring a variable, and the data type depends on the value of the variable.\r\n```\r\n$x = 5;      // $x is an integer\r\n$y = \"John\"; // $y is a string\r\necho $x;\r\necho $y;\r\n```\r\n\r\nPHP supports the following data types:\r\n\r\n* String\r\n* Integer\r\n* Float (floating point numbers - also called double)\r\n* Boolean\r\n* Array\r\n* Object\r\n* NULL\r\n* Resource\r\n\r\n## Get the Type\r\nTo get the data type of a variable, use the `var_dump()` function.\r\n\r\n## Example\r\nThe `var_dump()` function returns the data type and the value:\r\n```\r\n$x = 5;\r\nvar_dump($x);\r\n```\r\n\r\n## Example\r\nSee what `var_dump()` returns for other data types:\r\n```\r\nvar_dump(5);\r\nvar_dump(\"John\");\r\nvar_dump(3.14);\r\nvar_dump(true);\r\nvar_dump([2, 3, 56]);\r\nvar_dump(NULL);\r\n```\r\n\r\n## Assign String to a Variable\r\nAssigning a string to a variable is done with the variable name followed by an equal sign and the string:\r\n## Example\r\n```\r\n$x = \"John\";\r\necho $x;\r\n```\r\nString variables can be declared either by using double or single quotes, but you should be aware of the differences. Learn more about the differences in the PHP Strings chapter.\r\n\r\n# Assign Multiple Values\r\nYou can assign the same value to multiple variables in one line:\r\n### Example\r\nAll three variables get the value \"Fruit\":\r\n```\r\n$x = $y = $z = \"Fruit\";\r\n```',0,'2024-11-05 17:02:59','2024-11-05 17:02:59'),(9,1,'PHP Echo / Print','# PHP echo and print Statements\r\nWith PHP, there are two basic ways to get output: `echo` and `print`.\r\n\r\nIn this tutorial we use `echo` or `print` in almost every example. So, this chapter contains a little more info about those two output statements.\r\n\r\n## PHP echo and print Statements\r\n`echo` and `print` are more or less the same. They are both used to output data to the screen.\r\n\r\nThe differences are small: `echo` has no return value while `print` has a return value of 1 so it can be used in expressions. `echo` can take multiple parameters (although such usage is rare) while `print` can take one argument. `echo` is marginally faster than `print`.\r\n\r\n## The PHP echo Statement\r\nThe `echo` statement can be used with or without parentheses: `echo` or `echo()`.\r\n\r\n### Example\r\n```\r\necho \"Hello\";\r\n//same as:\r\necho(\"Hello\");\r\n```\r\n\r\n### Display Text\r\nThe following example shows how to output text with the `echo` command (notice that the text can contain HTML markup):\r\n### Example\r\n```\r\necho \"<h2>PHP is Fun!</h2>\";\r\necho \"Hello world!<br>\";\r\necho \"I\'m about to learn PHP!<br>\";\r\necho \"This \", \"string \", \"was \", \"made \", \"with multiple parameters.\";\r\n```\r\n## Display Variables\r\nThe following example shows how to output text and variables with the `echo` statement:\r\n## Example\r\n```\r\n$txt1 = \"Learn PHP\";\r\n$txt2 = \"W3Schools.com\";\r\n\r\necho \"<h2>$txt1</h2>\";\r\necho \"<p>Study PHP at $txt2</p>\";\r\n```\r\n# Using Single Quotes\r\nStrings are surrounded by quotes, but there is a difference between single and double quotes in PHP.\r\n\r\nWhen using double quotes, variables can be inserted to the string as in the example above.\r\n\r\nWhen using single quotes, variables have to be inserted using the `.` operator, like this:\r\n\r\n### Example\r\n```\r\n$txt1 = \"Learn PHP\";\r\n$txt2 = \"W3Schools.com\";\r\n\r\necho \'<h2>\' . $txt1 . \'</h2>\';\r\necho \'<p>Study PHP at \' . $txt2 . \'</p>\';\r\n```\r\n## The PHP print Statement\r\nThe `print` statement can be used with or without parentheses: `print` or `print()`.\r\n## Example\r\n```\r\nprint \"Hello\";\r\n//same as:\r\nprint(\"Hello\");\r\n```\r\n## Display Text\r\nThe following example shows how to output text with the print command (notice that the text can contain HTML markup):\r\n## Example\r\n```\r\nprint \"<h2>PHP is Fun!</h2>\";\r\nprint \"Hello world!<br>\";\r\nprint \"I\'m about to learn PHP!\";\r\n```\r\n### Display Variables\r\nThe following example shows how to output text and variables with the print statement:\r\n### Example\r\n```\r\n$txt1 = \"Learn PHP\";\r\n$txt2 = \"W3Schools.com\";\r\n\r\nprint \"<h2>$txt1</h2>\";\r\nprint \"<p>Study PHP at $txt2</p>\";\r\n```\r\n## Using Single Quotes\r\nStrings are surrounded by quotes, but there is a difference between single and double quotes in PHP.\r\n\r\nWhen using double quotes, variables can be inserted to the string as in the example above.\r\n\r\nWhen using single quotes, variables have to be inserted using the `.` operator, like this:\r\n\r\n## Example\r\n```\r\n$txt1 = \"Learn PHP\";\r\n$txt2 = \"W3Schools.com\";\r\n\r\nprint \'<h2>\' . $txt1 . \'</h2>\';\r\nprint \'<p>Study PHP at \' . $txt2 . \'</p>\';\r\n```',0,'2024-11-05 17:11:15','2024-11-05 17:11:15'),(10,1,'PHP Data Types','# PHP Data Types\r\n\r\n### PHP Data Types\r\nVariables can store data of different types, and different data types can do different things.\r\n\r\nPHP supports the following data types:\r\n\r\n* String\r\n* Integer\r\n* Float (floating point numbers - also called double)\r\n* Boolean\r\n* Array\r\n* Object\r\n* NULL\r\n* Resource\r\n\r\n### Getting the Data Type\r\nYou can get the data type of any object by using the `var_dump()` function.\r\n### Example\r\nThe `var_dump()` function returns the data type and the value:\r\n```\r\n$x = 5;\r\nvar_dump($x);\r\n```\r\nPHP String\r\nA string is a sequence of characters, like \"Hello world!\".\r\n\r\nA string can be any text inside quotes. You can use single or double quotes:\r\n### Example\r\n```\r\n$x = \"Hello world!\";\r\n$y = \'Hello world!\';\r\n\r\nvar_dump($x);\r\necho \"<br>\";\r\nvar_dump($y);\r\n```\r\n## PHP Integer\r\nAn integer data type is a non-decimal number between -2,147,483,648 and 2,147,483,647.\r\n\r\nRules for integers:\r\n\r\n* An integer must have at least one digit\r\n* An integer must not have a decimal point\r\n* An integer can be either positive or negative\r\n* Integers can be specified in: decimal (base 10), hexadecimal (base 16), octal (base 8), or binary (base 2) notation\r\n\r\nIn the following example `$x` is an integer. The PHP `var_dump()` function returns the data type and value:\r\n```\r\nExample\r\n$x = 5985;\r\nvar_dump($x);\r\n```\r\n\r\n## PHP Float\r\nA float (floating point number) is a number with a decimal point or a number in exponential form.\r\n\r\nIn the following example `$x` is a float. The PHP `var_dump()` function returns the data type and value:\r\n### Example\r\n```\r\n$x = 10.365;\r\nvar_dump($x);\r\n```\r\n\r\n## PHP Boolean\r\nA Boolean represents two possible states: TRUE or FALSE.\r\n### Example\r\n```\r\n$x = true;\r\nvar_dump($x);\r\n```\r\n\r\nBooleans are often used in conditional testing.\r\n\r\nPHP Array\r\nAn array stores multiple values in one single variable.\r\n\r\nIn the following example `$cars` is an array. The PHP `var_dump()` function returns the data type and value:\r\n### Example\r\n```\r\n$cars = array(\"Volvo\",\"BMW\",\"Toyota\");\r\nvar_dump($cars);\r\n```\r\n# PHP Object\r\nClasses and objects are the two main aspects of object-oriented programming.\r\n\r\nA class is a template for objects, and an object is an instance of a class.\r\n\r\nWhen the individual objects are created, they inherit all the properties and behaviors from the class, but each object will have different values for the properties.\r\n\r\nLet\'s assume we have a class named `Car` that can have properties like `model`, `color`, etc. We can define variables like $model, $color, and so on, to hold the values of these properties.\r\n\r\nWhen the individual objects (Volvo, BMW, Toyota, etc.) are created, they inherit all the properties and behaviors from the class, but each object will have different values for the properties.\r\n\r\nIf you create a `__construct()` function, PHP will automatically call this function when you create an object from a class.\r\n\r\n### Example\r\n```\r\nclass Car {\r\n  public $color;\r\n  public $model;\r\n  public function __construct($color, $model) {\r\n    $this->color = $color;\r\n    $this->model = $model;\r\n  }\r\n  public function message() {\r\n    return \"My car is a \" . $this->color . \" \" . $this->model . \"!\";\r\n  }\r\n}\r\n\r\n$myCar = new Car(\"red\", \"Volvo\");\r\nvar_dump($myCar);\r\n```\r\n\r\n## PHP NULL Value\r\nNull is a special data type which can have only one value: NULL.\r\n\r\nA variable of data type NULL is a variable that has no value assigned to it.\r\n\r\n**Tip:** If a variable is created without a value, it is automatically assigned a value of NULL.\r\n\r\nVariables can also be emptied by setting the value to NULL:\r\n### Example\r\n```\r\n$x = \"Hello world!\";\r\n$x = null;\r\nvar_dump($x);\r\n```\r\n# Change Data Type\r\nIf you assign an integer value to a variable, the type will automatically be an integer.\r\n\r\nIf you assign a string to the same variable, the type will change to a string:\r\n\r\n### Example\r\n```\r\n$x = 5;\r\nvar_dump($x);\r\n\r\n$x = \"Hello\";\r\nvar_dump($x);\r\n```\r\nIf you want to change the data type of an existing variable, but not by changing the value, you can use casting.\r\n\r\nCasting allows you to change data type on variables:\r\n### Example\r\n```\r\n$x = 5;\r\n$x = (string) $x;\r\nvar_dump($x);\r\n```\r\n# PHP Resource\r\nThe special resource type is not an actual data type. It is the storing of a reference to functions and resources external to PHP.\r\n\r\nA common example of using the resource data type is a database call.\r\n',0,'2024-11-05 19:35:21','2024-11-05 19:35:21'),(11,1,'PHP Casting','# PHP Constants\r\n\r\nConstants are like variables, except that once they are defined they cannot be changed or undefined.\r\n\r\n## PHP Constants\r\nA constant is an identifier (name) for a simple value. The value cannot be changed during the script.\r\n\r\nA valid constant name starts with a letter or underscore (no $ sign before the constant name).\r\n\r\n**Note:** Unlike variables, constants are automatically global across the entire script.\r\n\r\n## Create a PHP Constant\r\nTo create a constant, use the `define()` function.\r\n\r\n### Syntax\r\n```\r\ndefine(name, value);\r\n```\r\nParameters:\r\n\r\n* name: Specifies the name of the constant\r\n* value: Specifies the value of the constant\r\n\r\n### Example\r\nCreate a constant with a **case-sensitive** name:\r\n```\r\ndefine(\"GREETING\", \"Welcome to W3Schools.com!\");\r\necho GREETING;\r\n```\r\n## PHP const Keyword\r\nYou can also create a constant by using the `const` keyword.\r\n\r\n### Example\r\nCreate a case-sensitive constant with the `const` keyword:\r\n```\r\nconst MYCAR = \"Volvo\";\r\necho MYCAR;\r\n```\r\n`const` vs. `define()`\r\n\r\n* `const` cannot be created inside another block scope, like inside a function or inside an `if` statement.\r\n* `define` can be created inside another block scope.\r\n\r\n## PHP Constant Arrays\r\nFrom PHP7, you can create an Array constant using the `define()` function.\r\n### Example\r\nCreate an Array constant:\r\n```\r\ndefine(\"cars\", [\r\n  \"Alfa Romeo\",\r\n  \"BMW\",\r\n  \"Toyota\"\r\n]);\r\necho cars[0];\r\n```\r\n## Constants are Global\r\nConstants are automatically global and can be used across the entire script.\r\n### Example\r\nThis example uses a constant inside a function, even if it is defined outside the function:\r\n```\r\ndefine(\"GREETING\", \"Welcome to W3Schools.com!\");\r\n\r\nfunction myTest() {\r\n  echo GREETING;\r\n}\r\n\r\nmyTest();\r\n```\r\n',0,'2024-11-05 19:54:19','2024-11-05 19:54:19'),(12,1,'PHP Operators','# PHP Operators\r\nOperators are used to perform operations on variables and values.\r\n\r\nPHP divides the operators in the following groups:\r\n\r\n* Arithmetic operators\r\n* Assignment operators\r\n* Comparison operators\r\n* Increment/Decrement operators\r\n* Logical operators\r\n* String operators\r\n* Array operators\r\n* Conditional assignment operators\r\n\r\n# PHP Arithmetic Operators\r\nThe PHP arithmetic operators are used with numeric values to perform common arithmetical operations, such as addition, subtraction, multiplication etc.\r\n\r\n| Operator | Name | Example | Result |\r\n| -------- | -------- | -------- |\r\n| +     | Addition      | $x + $y     | 	Sum of $x and $y     |\r\n| -     | Subtraction      | $x - $y     | Difference of $x and $y	  |\r\n| *     | Multiplication      | 	$x * $y     | 	Product of $x and $y     |\r\n| /     | Division      | $x / $y     | 	Quotient of $x and $y    |  \r\n| %     | Modulus      | $x % $y     | Remainder of $x divided by $y   |\r\n| **     | Exponentiation      | 	$x ** $y     | 	Result of raising $x to the $y\'th power     |\r\n\r\n\r\n# PHP Assignment Operators\r\nThe PHP assignment operators are used with numeric values to write a value to a variable.\r\n\r\nThe basic assignment operator in PHP is \"=\". It means that the left operand gets set to the value of the assignment expression on the right.\r\n\r\n\r\n| Assignment | Same as | Description \r\n| -------- | -------- | -------- |\r\n| x = y	| x = y	|The left operand gets set to the value of the expression on the right	\r\n|x +=y	| x = x + y |	Addition	\r\n|x -= y |	x = x - y	|Subtraction	\r\n|x *= y	|x = x * y	| Multiplication	\r\n|x /= y	|x = x / y	| Division	\r\n|x %= y	|x = x % y	|Modulus\r\n\r\n# PHP Comparison Operators\r\nThe PHP comparison operators are used to compare two values (number or string):\r\n\r\n|Operator	|Name	|Example	|Result\r\n| -------- | -------- | -------- |\r\n|==	|Equal	| $x == $y	| Returns true if $x is equal to $y |\r\n|===|	Identical|	$x === $y	| Returns true if $x is equal to $y, and they are of the same type|\r\n|!=	|Not equal	|$x != $y|	Returns true if $x is not equal to $y	|\r\n|<>|	Not equal|	$x <> $y|	Returns true if $x is not equal to $y	|\r\n|!==	|Not identical	|$x !== $y	|Returns true if $x is not equal to $y, or they are not of the same type|\r\n|>	|Greater than	|$x > $y	|Returns true if $x is greater than $y|\r\n|<	|Less than	|$x < $y	|Returns true if $x is less than $y	|\r\n|>=	|Greater than or equal to	|$x >= $y	|Returns true if $x is greater than or equal to $y	|\r\n|<=	|Less than or equal to	|$x <= $y	|Returns true if $x is less than or equal to $y|\r\n|<=>| Spaceship	| $x <=> $y	|Returns an integer less than, equal to, or greater than zero, depending on if $x is less than, equal to, or greater than $y. Introduced in PHP 7.|\r\n\r\n## PHP Increment / Decrement Operators\r\nThe PHP increment operators are used to increment a variable\'s value.\r\n\r\nThe PHP decrement operators are used to decrement a variable\'s value.\r\n\r\n|Operator	|Same as...	|Description	|\r\n| -------- | -------- | -------- |\r\n|++$x	|Pre-increment	|Increments $x by one, then returns $x	\r\n|$x++	|Post-increment	|Returns $x, then increments $x by one	\r\n|--$x	|Pre-decrement	|Decrements $x by one, then returns $x	\r\n|$x--	|Post-decrement	|Returns $x, then decrements $x by one\r\n\r\n## PHP Logical Operators\r\nThe PHP logical operators are used to combine conditional statements.\r\n\r\n|Operator	|Name	|Example	|Result\r\n| -------- | -------- | -------- |\r\n|and	|And	|$x and $y	|True if both $x and $y are true	\r\n|or	|Or	|$x or $y	|True if either $x or $y is true	\r\n|xor	|Xor	|$x xor $y	|True if either $x or $y is true, but not both	\r\n|&&	|And	|$x && $y	|True if both $x and $y are true	\r\n',0,'2024-11-05 20:43:23','2024-11-05 20:43:23'),(13,1,'PHP if Statements','Conditional statements are used to perform different actions based on different conditions.\r\n\r\n## PHP Conditional Statements\r\nVery often when you write code, you want to perform different actions for different conditions. You can use conditional statements in your code to do this.\r\n\r\nIn PHP we have the following conditional statements:\r\n\r\n* `if` statement - executes some code if one condition is true\r\n* `if...else` statement - executes some code if a condition is true and another *code if that condition is false\r\n* `if...elseif...else` statement - executes different codes for more than two conditions\r\n* `switch` statement - selects one of many blocks of code to be executed\r\n\r\n## PHP - The if Statement\r\nThe `if` statement executes some code if one condition is true.\r\n### Syntax\r\n```\r\nif (condition) {\r\n  // code to be executed if condition is true;\r\n}\r\n```\r\n### Example\r\nOutput \"Have a good day!\" if 5 is larger than 3:\r\n```\r\nif (5 > 3) {\r\n  echo \"Have a good day!\";\r\n}\r\n```\r\nWe can also use variables in the if statement:\r\n\r\n### Example\r\nOutput \"Have a good day!\" if `$t` is less than 20:\r\n```\r\n$t = 14;\r\n\r\nif ($t < 20) {\r\n  echo \"Have a good day!\";\r\n}\r\n```',0,'2024-11-05 20:47:09','2024-11-05 20:47:09'),(14,1,'PHP Switch Statement','The `switch` statement is used to perform different actions based on different conditions.\r\n\r\nThe PHP switch Statement\r\nUse the `switch` statement to select one of many blocks of code to be executed.\r\n\r\n### Syntax\r\n```\r\nswitch (expression) {\r\n  case label1:\r\n    //code block\r\n    break;\r\n  case label2:\r\n    //code block;\r\n    break;\r\n  case label3:\r\n    //code block\r\n    break;\r\n  default:\r\n    //code block\r\n}\r\n```\r\nThis is how it works:\r\n\r\n* The expression is evaluated once\r\n* The value of the expression is compared with the values of each case\r\n* If there is a match, the associated block of code is executed\r\n* The `break` keyword breaks out of the switch block\r\n* The `default` code block is executed if there is no match\r\n\r\n### Example\r\n```\r\n$favcolor = \"red\";\r\n\r\nswitch ($favcolor) {\r\n  case \"red\":\r\n    echo \"Your favorite color is red!\";\r\n    break;\r\n  case \"blue\":\r\n    echo \"Your favorite color is blue!\";\r\n    break;\r\n  case \"green\":\r\n    echo \"Your favorite color is green!\";\r\n    break;\r\n  default:\r\n    echo \"Your favorite color is neither red, blue, nor green!\";\r\n}\r\n```\r\n### The break Keyword\r\nWhen PHP reaches a `break` keyword, it breaks out of the switch block.\r\n\r\nThis will stop the execution of more code, and no more cases are tested.\r\n\r\nThe last block does not need a break, the block breaks (ends) there anyway.\r\n\r\n**Warning:** If you omit the `break` statement in a case that is not the last, and that case gets a match, the next case will also be executed even if the evaluation does not match the case!\r\n\r\n### Example\r\nWhat happens if we remove the `break` statement from case \"red\"?\r\n\r\n`$favcolor` is red, so the code block from case \"red\" is executed, but since it has no break statement, the code block from case \"blue\" will also be executed:\r\n\r\n```\r\n$favcolor = \"red\";\r\n\r\nswitch ($favcolor) {\r\n  case \"red\":\r\n    echo \"Your favorite color is red!\";\r\n  case \"blue\":\r\n    \"Your favorite color is blue!\";\r\n    break;\r\n  case \"green\":\r\n    echo \"Your favorite color is green!\";\r\n    break;\r\n  default:\r\n    echo \"Your favorite color is neither red, blue, nor green!\";\r\n}\r\n```\r\n\r\n\r\n### The default Keyword\r\nThe `default` keyword specifies the code to run if there is no case match:\r\n### Example\r\nIf no cases get a match, the `default` block is executed:\r\n```\r\n$d = 4;\r\n\r\nswitch ($d) {\r\n  case 6:\r\n    echo \"Today is Saturday\";\r\n    break;\r\n  case 0:\r\n    echo \"Today is Sunday\";\r\n    break;\r\n  default:\r\n    echo \"Looking forward to the Weekend\";\r\n}\r\n```\r\nThe `default` case does not have to be the last case in a switch block:\r\n### Example\r\nPutting  the `default` block elsewhere than at the end of the switch block is allowed, but not recommended.\r\n```\r\n$d = 4;\r\n\r\nswitch ($d) {\r\n  default:\r\n    echo \"Looking forward to the Weekend\";\r\n    break;\r\n  case 6:\r\n    echo \"Today is Saturday\";\r\n    break;\r\n  case 0:\r\n    echo \"Today is Sunday\";\r\n}\r\n```\r\n**Note:** If `default` is not the last block in the `switch` block, remember to end the `default` block with a `break` statement.\r\n\r\n### Common Code Blocks\r\nIf you want multiple cases to use the same code block, you can specify the cases like this:\r\n\r\n### Example\r\nMore than one case for each code block:\r\n```\r\n$d = 3;\r\n\r\nswitch ($d) {\r\n  case 1:\r\n  case 2:\r\n  case 3:\r\n  case 4:\r\n  case 5:  \r\n    echo \"The weeks feels so long!\";\r\n    break;\r\n  case 6:\r\n  case 0:\r\n    echo \"Weekends are the best!\";\r\n    break;\r\n  default:\r\n    echo \"Something went wrong\";\r\n}\r\n```\r\n',0,'2024-11-05 20:56:47','2024-11-05 20:56:47'),(15,1,'PHP Loops','In the following chapters you will learn how to repeat code by using loops in PHP.\r\n\r\nPHP Loops\r\nOften when you write code, you want the same block of code to run over and over again a certain number of times. So, instead of adding several almost equal code-lines in a script, we can use loops.\r\n\r\nLoops are used to execute the same block of code again and again, as long as a certain condition is true.\r\n\r\nIn PHP, we have the following loop types:\r\n\r\n* `while` - loops through a block of code as long as the specified condition is true\r\n* `do...while` - loops through a block of code once, and then repeats the loop as long as the specified condition is true\r\n* `for` - loops through a block of code a specified number of times\r\n* `foreach` - loops through a block of code for each element in an array\r\n\r\nThe following chapters will explain and give examples of each loop type.\r\n\r\n# The PHP while Loop\r\nThe `while` loop executes a block of code as long as the specified condition is true.\r\n\r\n### Example\r\nPrint `$i` as long as `$i` is less than 6:\r\n```\r\n$i = 1;\r\nwhile ($i < 6) {\r\n  echo $i;\r\n  $i++;\r\n}\r\n```\r\n\r\n**Note:** remember to increment `$i`, or else the loop will continue forever.\r\n\r\nThe `while` loop does not run a specific number of times, but checks after each iteration if the condition is still true.\r\n\r\nThe condition does not have to be a counter, it could be the status of an operation or any condition that evaluates to either true or false.\r\n\r\n### The break Statement\r\nWith the `break` statement we can stop the loop even if the condition is still true:\r\n\r\n### Example\r\nStop the loop when `$i` is 3:\r\n```\r\n$i = 1;\r\nwhile ($i < 6) {\r\n  if ($i == 3) break;\r\n  echo $i;\r\n  $i++;\r\n}\r\n```\r\n\r\n### The continue Statement\r\nWith the `continue` statement we can stop the current iteration, and continue with the next:\r\n\r\n### Example\r\nStop, and jump to the next iteration if `$i` is 3:\r\n```\r\n$i = 0;\r\nwhile ($i < 6) {\r\n  $i++;\r\n  if ($i == 3) continue;\r\n  echo $i;\r\n}\r\n```\r\n### Alternative Syntax\r\nThe `while` loop syntax can also be written with the `endwhile` statement like this\r\n\r\n### Example\r\nPrint `$i` as long as `$i` is less than 6:\r\n```\r\n$i = 1;\r\nwhile ($i < 6):\r\n  echo $i;\r\n  $i++;\r\nendwhile;\r\n```\r\n\r\n### Step 10\r\nIf you want the `while` loop count to 100, but only by each 10, you can increase the counter by 10 instead 1 in each iteration:\r\n\r\n### Example\r\nCount to 100 by tens:\r\n```\r\n$i = 0;\r\nwhile ($i < 100) {\r\n  $i+=10;\r\n  echo $i \"<br>\";\r\n}\r\n```\r\n\r\n# The PHP do...while Loop\r\nThe `do...while` loop will always execute the block of code at least once, it will then check the condition, and repeat the loop while the specified condition is true.\r\n\r\n### Example\r\nPrint `$i` as long as `$i` is less than 6:\r\n```\r\n$i = 1;\r\n\r\ndo {\r\n  echo $i;\r\n  $i++;\r\n} while ($i < 6);\r\n```\r\n\r\nLet us see what happens if we set the `$i` variable to 8 instead of 1, before execute the same `do...while` loop again:\r\n\r\nExample\r\nSet `$i = 8`, then print `$i` as long as `$i` is less than 6:\r\n```\r\n$i = 8;\r\n\r\ndo {\r\n  echo $i;\r\n  $i++;\r\n} while ($i < 6);\r\n```\r\n# The PHP for Loop\r\nThe `for` loop is used when you know how many times the script should run.\r\n\r\n### Syntax\r\n```\r\nfor (expression1, expression2, expression3) {\r\n  // code block\r\n}\r\n```\r\nThis is how it works:\r\n\r\n* expression1 is evaluated once\r\n* expression2 is evaluated before each iteration\r\n* expression3 is evaluated after each iteration\r\n\r\n### Example\r\nPrint the numbers from 0 to 10:\r\n```\r\nfor ($x = 0; $x <= 10; $x++) {\r\n  echo \"The number is: $x <br>\";\r\n}\r\n```\r\n\r\nExample Explained\r\n1. The first expression, `$x = 0;`, is evaluated once and sets a counter to 0.\r\n2. The second expression, `$x <= 10;`, is evaluated before each iteration, and the code block is only executed if this expression evaluates to true. In this example the expression is true as long as $x is less than, or equal to, 10.\r\n3. The third expression, `$x++;`, is evaluated after each iteration, and in this example, the expression increases the value of `$x` by one at each iteration.\r\n\r\n### The break Statement\r\nWith the `break` statement we can stop the loop even if the condition is still true:\r\n### Example\r\nStop the loop when `$x` is 3:\r\n```\r\nfor ($x = 0; $x <= 10; $x++) {\r\n  if ($x == 3) break;\r\n  echo \"The number is: $x <br>\";\r\n}\r\n```\r\n\r\n### The continue Statement\r\nWith the `continue` statement we can stop the current iteration, and continue with the next:\r\n\r\n### Example\r\nStop, and jump to the next iteration if `$x` is 3:\r\n```\r\nfor ($x = 0; $x <= 10; $x++) {\r\n  if ($x == 3) continue;\r\n  echo \"The number is: $x <br>\";\r\n}\r\n```\r\n\r\n### Step 10\r\nThis example counts to 100 by tens:\r\n\r\n### Example\r\n```\r\nfor ($x = 0; $x <= 100; $x+=10) {\r\n  echo \"The number is: $x <br>\";\r\n}\r\n```\r\n\r\n# PHP foreach Loop\r\nThe most common use of the `foreach` loop, is to loop through the items of an array.\r\n\r\n### Example\r\nLoop through the items of an indexed array:\r\n```\r\n$colors = array(\"red\", \"green\", \"blue\", \"yellow\");\r\n\r\nforeach ($colors as $x) {\r\n  echo \"$x <br>\";\r\n}\r\n```\r\nFor every loop iteration, the value of the current array element is assigned to the variabe `$x`. The iteration continues until it reaches the last array element.\r\n\r\n\r\n\r\n',0,'2024-11-05 20:58:18','2024-11-05 20:58:18'),(16,1,'PHP Functions','The real power of PHP comes from its functions.\r\n\r\nPHP has more than 1000 built-in functions, and in addition you can create your own custom functions.\r\n\r\n# PHP Built-in Functions\r\nPHP has over 1000 built-in functions that can be called directly, from within a script, to perform a specific task.\r\n\r\nPlease check out our PHP reference for a complete overview of the PHP built-in functions.\r\n\r\nPHP User Defined Functions\r\nBesides the built-in PHP functions, it is possible to create your own functions.\r\n\r\n* A function is a block of statements that can be used repeatedly in a program.\r\n* A function will not execute automatically when a page loads.\r\n* A function will be executed by a call to the function.\r\n\r\n# Create a Function\r\nA user-defined function declaration starts with the keyword `function`, followed by the name of the function:\r\n\r\n### Example\r\n```\r\nfunction myMessage() {\r\n  echo \"Hello world!\";\r\n}\r\n```\r\n\r\n**Note:** A function name must start with a letter or an underscore. Function names are NOT case-sensitive.\r\n\r\n**Tip:** Give the function a name that reflects what the function does!\r\n### Example\r\n```\r\nfunction myMessage() {\r\n  echo \"Hello world!\";\r\n}\r\n\r\nmyMessage();\r\n```\r\nIn our example, we create a function named `myMessage()`.\r\n\r\nThe opening curly brace { indicates the beginning of the function code, and the closing curly brace } indicates the end of the function.\r\n\r\nThe function outputs \"Hello world!\".\r\n\r\n# PHP Function Arguments\r\nInformation can be passed to functions through arguments. An argument is just like a variable.\r\n\r\nArguments are specified after the function name, inside the parentheses. You can add as many arguments as you want, just separate them with a comma.\r\n\r\nThe following example has a function with one argument `($fname)`. When the `familyName()` function is called, we also pass along a name, e.g. `(\"Jani\")`, and the name is used inside the function, which outputs several different first names, but an equal last name:\r\n\r\n### Example\r\n```\r\nfunction familyName($fname) {\r\n  echo \"$fname Refsnes.<br>\";\r\n}\r\n\r\nfamilyName(\"Jani\");\r\nfamilyName(\"Hege\");\r\nfamilyName(\"Stale\");\r\nfamilyName(\"Kai Jim\");\r\nfamilyName(\"Borge\");\r\n```\r\n\r\nThe following example has a function with two arguments `($fname, $year)`:\r\n\r\n### Example\r\n```\r\nfunction familyName($fname, $year) {\r\n  echo \"$fname Refsnes. Born in $year <br>\";\r\n}\r\n\r\nfamilyName(\"Hege\", \"1975\");\r\nfamilyName(\"Stale\", \"1978\");\r\nfamilyName(\"Kai Jim\", \"1983\");\r\n```\r\n\r\n### PHP Default Argument Value\r\n\r\nThe following example shows how to use a default parameter. If we call the function `setHeight()` without arguments it takes the default value as argument:\r\n\r\n### Example\r\n```\r\nfunction setHeight($minheight = 50) {\r\n  echo \"The height is : $minheight <br>\";\r\n}\r\n\r\nsetHeight(350);\r\nsetHeight(); // will use the default value of 50\r\nsetHeight(135);\r\nsetHeight(80)\r\n```\r\n\r\n# PHP Functions - Returning values\r\nTo let a function return a value, use the `return` statement:\r\n\r\n### Example\r\n```\r\nfunction sum($x, $y) {\r\n  $z = $x + $y;\r\n  return $z;\r\n}\r\n\r\necho \"5 + 10 = \" . sum(5, 10) . \"<br>\";\r\necho \"7 + 13 = \" . sum(7, 13) . \"<br>\";\r\necho \"2 + 4 = \" . sum(2, 4);\r\n```\r\n\r\n## Passing Arguments by Reference\r\nIn PHP, arguments are usually passed by value, which means that a copy of the value is used in the function and the variable that was passed into the function cannot be changed.\r\n\r\nWhen a function argument is passed by reference, changes to the argument also change the variable that was passed in. To turn a function argument into a reference, the `&` operator is used:\r\n### Example\r\nUse a pass-by-reference argument to update a variable:\r\n```\r\nfunction add_five(&$value) {\r\n  $value += 5;\r\n}\r\n\r\n$num = 2;\r\nadd_five($num);\r\necho $num;\r\n```\r\n\r\n# Variable Number of Arguments\r\nBy using the ... operator in front of the function parameter, the function accepts an unknown number of arguments. This is also called a variadic function.\r\n\r\nThe variadic function argument becomes an array.\r\n###  Example\r\nA function that do not know how many arguments it will get:\r\n```\r\nfunction sumMyNumbers(...$x) {\r\n  $n = 0;\r\n  $len = count($x);\r\n  for($i = 0; $i < $len; $i++) {\r\n    $n += $x[$i];\r\n  }\r\n  return $n;\r\n}\r\n\r\n$a = sumMyNumbers(5, 2, 6, 2, 7, 7);\r\necho $a;\r\n```\r\n\r\nYou can only have one argument with variable length, and it has to be the last argument.\r\n\r\n### Example\r\nThe variadic argument must be the last argument:\r\n```\r\nfunction myFamily($lastname, ...$firstname) {\r\n  txt = \"\";\r\n  $len = count($firstname);\r\n  for($i = 0; $i < $len; $i++) {\r\n    $txt = $txt.\"Hi, $firstname[$i] $lastname.<br>\";\r\n  }\r\n  return $txt;\r\n}\r\n\r\n$a = myFamily(\"Doe\", \"Jane\", \"John\", \"Joey\");\r\necho $a;\r\n```\r\nIf the variadic argument is not the last argument, you will get an error.\r\n\r\n### Example\r\nHaving the ... operator on the first of two arguments, will raise an error:\r\n```\r\nfunction myFamily(...$firstname, $lastname) {\r\n  $txt = \"\";\r\n  $len = count($firstname);\r\n  for($i = 0; $i < $len; $i++) {\r\n    $txt = $txt.\"Hi, $firstname[$i] $lastname.<br>\";\r\n  }\r\n  return $txt;\r\n}\r\n\r\n$a = myFamily(\"Doe\", \"Jane\", \"John\", \"Joey\");\r\necho $a;\r\n```\r\n\r\n## PHP is a Loosely Typed Language\r\nIn the examples above, notice that we did not have to tell PHP which data type the variable is.\r\n\r\nPHP automatically associates a data type to the variable, depending on its value. Since the data types are not set in a strict sense, you can do things like adding a string to an integer without causing an error.\r\n\r\nIn PHP 7, type declarations were added. This gives us an option to specify the expected data type when declaring a function, and by adding the `strict` declaration, it will throw a \"Fatal Error\" if the data type mismatches.\r\n\r\nIn the following example we try to send both a number and a string to the function without using `strict`:\r\n\r\n### Example\r\n```\r\nfunction addNumbers(int $a, int $b) {\r\n  return $a + $b;\r\n}\r\necho addNumbers(5, \"5 days\");\r\n// since strict is NOT enabled \"5 days\" is changed to int(5), and it will return 10\r\n```\r\n\r\nTo `specify` strict we need to set `declare(strict_types=1);`. This must be on the very first line of the PHP file.\r\n\r\nIn the following example we try to send both a number and a string to the function, but here we have added the `strict` declaration:\r\n\r\n### Example\r\n```\r\n<?php declare(strict_types=1); // strict requirement\r\n\r\nfunction addNumbers(int $a, int $b) {\r\n  return $a + $b;\r\n}\r\necho addNumbers(5, \"5 days\");\r\n// since strict is enabled and \"5 days\" is not an integer, an error will be thrown\r\n?>\r\n```\r\n\r\nThe `strict` declaration forces things to be used in the intended way.\r\n\r\n## PHP Return Type Declarations\r\nPHP 7 also supports Type Declarations for the `return` statement. Like with the type declaration for function arguments, by enabling the strict requirement, it will throw a \"Fatal Error\" on a type mismatch.\r\n\r\nTo declare a type for the function return, add a colon ( : ) and the type right before the opening curly ( `{` )bracket when declaring the function.\r\n\r\nIn the following example we specify the return type for the function:\r\n\r\n### Example\r\n```\r\n<?php declare(strict_types=1); // strict requirement\r\nfunction addNumbers(float $a, float $b) : float {\r\n  return $a + $b;\r\n}\r\necho addNumbers(1.2, 5.2);\r\n?>\r\n```\r\nYou can specify a different return type, than the argument types, but make sure the return is the correct type:\r\n### Example\r\n```\r\n<?php declare(strict_types=1); // strict requirement\r\nfunction addNumbers(float $a, float $b) : int {\r\n  return (int)($a + $b);\r\n}\r\necho addNumbers(1.2, 5.2);\r\n```',0,'2024-11-05 21:36:00','2024-11-05 21:36:00'),(17,1,'PHP Arrays','An array stores multiple values in one single variable:\r\n\r\n### Example\r\n```\r\n$cars = array(\"Volvo\", \"BMW\", \"Toyota\");\r\n```\r\n\r\n# What is an Array?\r\nAn array is a special variable that can hold many values under a single name, and you can access the values by referring to an index number or name.\r\n\r\n# PHP Array Types\r\nIn PHP, there are three types of arrays:\r\n\r\n* **Indexed arrays** - Arrays with a numeric index\r\n* **Associative arrays** - Arrays with named keys\r\n* **Multidimensional arrays** - Arrays containing one or more arrays\r\n	\r\n## Working With Arrays\r\nIn this tutorial you will learn how to work with arrays, including:\r\n\r\n* Create Arrays\r\n* Access Arrays\r\n* Update Arrays\r\n* Add Array Items\r\n* Remove Array Items\r\n* Sort Arrays\r\n\r\n## Array Items\r\nArray items can be of any data type.\r\n\r\nThe most common are strings and numbers (int, float), but array items can also be objects, functions or even arrays.\r\n\r\nYou can have different data types in the same array.\r\n\r\n### Example\r\nArray items of four different data types:\r\n```\r\n$myArr = array(\"Volvo\", 15, [\"apples\", \"bananas\"], myFunction);\r\n```\r\n\r\n## Array Functions\r\nThe real strength of PHP arrays are the built-in array functions, like the count() function for counting array items:\r\n\r\n### Example\r\nHow many items are in the `$cars` array:\r\n```\r\n$cars = array(\"Volvo\", \"BMW\", \"Toyota\");\r\necho count($cars);\r\n```',0,'2024-11-05 21:39:56','2024-11-05 21:39:56');
/*!40000 ALTER TABLE `levels` ENABLE KEYS */;
UNLOCK TABLES;

-- -----------------------------------------------------
-- Table `task_answers`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `task_answers` ;

CREATE TABLE IF NOT EXISTS `task_answers` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `answers` BLOB NULL,
  `user_id` INT NOT NULL,
  `task_id` INT NOT NULL,
  `lesson_id` INT NOT NULL,
  `created_at` DATETIME NULL DEFAULT NOW(),
  `updated_at` DATETIME NULL DEFAULT NOW(),
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_challenge_answers_materials1`
    FOREIGN KEY (`task_id`)
    REFERENCES `levels` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_challenge_answers_lessons1`
    FOREIGN KEY (`lesson_id`)
    REFERENCES `lessons` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_task_answers_users1`
    FOREIGN KEY (`user_id`)
    REFERENCES `users` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_challenge_answers_materials1_idx` ON `task_answers` (`task_id` ASC) ;

CREATE INDEX `fk_challenge_answers_lessons1_idx` ON `task_answers` (`lesson_id` ASC) ;

CREATE INDEX `fk_task_answers_users1_idx` ON `task_answers` (`user_id` ASC) ;

-- -----------------------------------------------------
-- Table `feedbacks`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `feedbacks` ;

CREATE TABLE IF NOT EXISTS `feedbacks` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `user_id` INT NOT NULL,
  `rate` INT(2) NOT NULL,
  `lesson_id` INT NOT NULL,
  `content` TEXT NULL,
  `created_at` DATETIME NULL DEFAULT NOW(),
  `updated_at` DATETIME NULL DEFAULT NOW(),
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_feedbacks_users1`
    FOREIGN KEY (`user_id`)
    REFERENCES `users` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_feedbacks_lessons1`
    FOREIGN KEY (`lesson_id`)
    REFERENCES `lessons` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_feedbacks_users1_idx` ON `feedbacks` (`user_id` ASC) ;

CREATE INDEX `fk_feedbacks_lessons1_idx` ON `feedbacks` (`lesson_id` ASC) ;



SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
